!<arch>
0-isupper.c/    0           0     0     644     246       `
#include "main.h"

/**
  * _isupper - checks for uppercase character
  * @c: input charcter ASCII value
  *
  * Return: 1 for uppercase letter else zero
  */
int _isupper(int c)
{

	if ((c <= 90) && (c >= 65))
	{
		return (1);
	}

	return (0);
}
0-memset.c/     0           0     0     644     359       `
#include "main.h"

/**
 * _memset - function fills the first n bytes of the memory pointed to by s
 * @s: pionter
 * @b: constant bytes to fill memory with
 * @n: number bytes of the memory area
 *
 * Return: pointer to memeory s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     343       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @src: input string one
 * @dest: input string two
 *
 * Return: char
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j;

	while (dest[i] != '\0')
	{
		i++;
	}
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[(i + j)] = src[j];
	}
	dest[(i + j)] = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     438       `
#include "main.h"

/**
 * _atoi - convert string to integer
 * @s: input string
 *
 * Return: integer
 */
int _atoi(char *s)
{
	int i = 0;
	int sign = -1;
	int result = 0;
	int flag = 0;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
		{
			sign *= -1;
		}
		if ((s[i] <= '9') && (s[i] >= '0'))
		{
			result *= 10;
			result -= (s[i] - '0');
			flag = 1;
		}
		else if (flag == 1)
			break;

		i++;
	}
	result *= sign;
	return (result);
}
1-isdigit.c/    0           0     0     644     214       `
#include "main.h"

/**
 * _isdigit - Check if input is digit
 * @c: input number
 *
 * Return: 1 if input is digit, otherwise 0
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}
1-memcpy.c/     0           0     0     644     346       `
#include "main.h"

/**
 * _memcpy - copies n bytes from memory area src to memory area dest
 * @dest: memory destination
 * @src: source to copy from
 * @n: number of bytes to copy
 *
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     382       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings
 * @src: input string1
 * @dest: input string2
 * @n: number of bytes to use from input1
 *
 * Return: string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j;

	while (dest[i] != '\0')
		i++;

	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[i + j] = src[j];
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     324       `
#include "main.h"

/**
 * _strchr - Returns a pointer to the first occurrence of the character c
 * @s: string to search in
 * @c: charter to search for
 *
 * Return: pionter
 */
char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
			s++;
		else
			return (s);
	}
	if (c == '\0')
		return (s);

	return (NULL);
}
2-strlen.c/     0           0     0     644     159       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: input string
 *
 * Return: integer
 */
int _strlen(char *s)
{
	return (strlen(s));
}

2-strncpy.c/    0           0     0     644     364       `
#include "main.h"

/**
 * _strncpy - copies a string like strncpy
 * @src: source to be copied
 * @dest: destination of copy
 * @n: number of bytes
 *
 * Return: char
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != 0; i++)
	{
		if (i < n)
			dest[i] = src[i];
	}
	while (i  < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     260       `
#include "main.h"

/**
  * _islower - Checks for lowercase character
  * @c: The character to be checked
  *
  * Return: 1 for lowercase character or 0 for anything else
  */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}

	return (0);

}
3-puts.c/       0           0     0     644     233       `
#include "main.h"

/**
 * _puts - prints a string
 *@str: input string
 *
 * Return: void
 */
void _puts(char *str)
{
	int length, i;

	length = strlen(str);
	for (i = 0; i < length; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     308       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: input string1
 * @s2: input string2
 *
 * Return: -1 less, 0 same, 1 more
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; (s1[i] != '\0' && s2[i] != '\0'); i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     457       `
#include "main.h"

/**
 * _strspn -  function returns the number of characters in the initial segment
 * @s: string to search in
 * @accept: pattern to search for
 *
 * Return: number of bytes in s
 */
unsigned int _strspn(char *s, char *accept)
{
	int count = 0;
	int j;

	while (*s)
	{
		for (j = 0; accept[j] != '\0'; j++)
			if (*s == accept[j])
			{
				count++;
				break;
			}
		if (accept[j] == '\0')
			return (count);
		s++;
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     262       `
#include "main.h"

/**
  * _isalpha - Checks if letter
  * @c: The character to be checked
  *
  * Return: 1 for letter or 0 anything else
  */
int _isalpha(int c)
{
	if (((c <= 90) && (c >= 65)) || ((c <= 122) && (c >= 97)))
	{
		return (1);
	}

	return (0);
}
4-strpbrk.c/    0           0     0     644     392       `
#include "main.h"

/**
 * _strpbrk - locates the first occurrence in s of any of bytes in accept
 * @s: search in string
 * @accept: the bytes we search for
 *
 * Return: first occurrance of any byte of accept
 */
char *_strpbrk(char *s, char *accept)
{
	int j;

	while (*s)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (accept[j] == *s)
				return (s);
		}
		s++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     591       `
#include "main.h"

/**
 * _strstr - function finds the first occurrence of the substring
 * @haystack: string we search in
 * @needle: substring we search for
 *
 * Return: pointer to the beginning of the located substring
 */
char *_strstr(char *haystack, char *needle)
{
	int i = 0;
	int j;

	if (needle[i] == '\0')
		return (haystack);
	for (i = 0; haystack[i] != '\0'; i++)
	{
		if (haystack[i] == needle[0])
		{
			for (j = 0; needle[j] != '\0'; j++)
			{
				if (haystack[i + j] != needle[j])
					break;
			}
			if (needle[j] == '\0')
				return (haystack + i);
		}
	}
	return (0);
}

6-abs.c/        0           0     0     644     186       `
#include "main.h"

/**
 * _abs - find absolute of integer.
 *
 * @n: intger input.
 *
 * Return: positive intger.
 */

int _abs(int n)
{
	if (n < 0)
	{
		return (-n);
	}

	return (n);
}
9-strcpy.c/     0           0     0     644     306       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * @dest: output destination buffer
 * @src: input source pionter
 *
 * Return: char
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

